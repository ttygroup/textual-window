# HOW THIS WORKFLOW WORKS
# This workflow automates creating a GitHub Release and publishing the Python package to PyPI.

# --- Manual Steps ---
# 1. Edit `pyproject.toml` to set the new version (e.g., `version = "1.2.3"` or `version = "1.2.4-rc1"` for pre-releases).
# 2. Commit the change and merge it to the `main` branch (From the feature branch or however you work).
# 3. On your local machine, fetch and pull the latest changes from `main` to ensure you're up to date.
# 4. Use the justfile: `just release` to trigger the process.

# --- Automation ---
# - runs .github/scripts/tag_release.py to create a new tag based on the version in `pyproject.toml`.
# - Pushes the new tag to github which triggers this workflow file.
# - Checks that the tag matches the version in `pyproject.toml`.
# - Builds the sdist and wheel.
# - Publishes the package to PyPI using trusted publishing.
# - Reads the release notes from your CHANGELOG.md.
# - Creates a new GitHub Release, marking it as a pre-release if necessary.


name: Create Release and Publish to PyPI

on:
  push:
    tags:
      - "v*" # Runs on any tag starting with "v", e.g., v1.2.3 or v1.2.3-rc1
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to create release for (e.g., v1.2.3). Must start with "v".'
        required: true
        type: string

jobs:
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for Trusted Publishing with PyPI (OIDC).
      contents: write   # Required to create the GitHub Release.

    steps:
      # If manually triggered, checkout the specific tag. Otherwise, it checks out the tag that triggered the workflow.
      # Fetch all history for all tags so the changelog-reader can find previous tags.
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Install required python packages
        run: python -m pip install --upgrade build tomli

      # Use github.ref_name which reliably gives the tag name (e.g., "v1.2.3")
      # Create a step output named 'version' that contains the tag name without the 'v'
      - name: Verify tag matches pyproject.toml version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")

          if [ "v$PYPROJECT_VERSION" != "$TAG_NAME" ]; then
            echo "Error: Tag '$TAG_NAME' does not match pyproject.toml version 'v$PYPROJECT_VERSION'"
            exit 1
          fi

          echo "Tag and pyproject.toml version match: $TAG_NAME"
          echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: warn
          version: ${{ steps.version_check.outputs.version }}
          path: ./CHANGELOG.md

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          # Use the tag name that triggered the workflow
          tag: ${{ github.ref_name }}
          # The release title will be, e.g., "Release v1.2.3"
          name: Release ${{ github.ref_name }}
          # The body of the release is the changelog entry from the previous step
          body: ${{ steps.changelog_reader.outputs.changes }}
          # Automatically mark as pre-release if the tag contains a hyphen (e.g., v1.2.3-rc1)
          prerelease: ${{ contains(github.ref_name, '-') }}
          # This allows the action to update a release if it already exists
          allowUpdates: true